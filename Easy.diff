--- /home/tokuhirom/rakudo-star-2015.07/modules/perl6-http-easy/lib/HTTP/Easy.pm6	2015-07-26 04:19:46.000000000 +0900
+++ lib/HTTP/Easy.pm6	2015-08-21 14:04:56.501254653 +0900
@@ -9,7 +9,6 @@
 has Str $.host   = '0.0.0.0';
 has Bool $.debug = False;
 has $!listener;
-has $.connection;          ## To be populated by accept().
 has %.env;                 ## The environment, generated by run().
 has $.http-protocol;       ## The HTTP version being used.
 has $.body;                ## Any request body, populated by run().
@@ -27,7 +26,8 @@
 sub message ($message) 
 {
   my $timestamp = DateTime.new(time).Str;
-  note "[$timestamp] $message";
+  my $tid = $*THREAD.id;
+  note "$tid [$timestamp] $message";
 }
 
 method connect (:$port=$.port, :$host=$.host)
@@ -49,15 +49,18 @@
   if ! $!listener { self.connect; }
   message('Started HTTP server.');
   self.pre-connection;
-  while $!connection = $!listener.accept 
+  my $connection;
+  while $connection = $!listener.accept 
   {
     if $.debug { message("Client connection received."); }
     self.on-connection;
 
+    try {
+
     my $first-chunk;
     my $msg-body-pos;
 
-    while my $t = $!connection.recv( :bin ) {
+    while my $t = $connection.recv( :bin ) {
         if $!debug { message("Received a chunk of { $t.elems } bytes length") }
         if $first-chunk.defined {
             $first-chunk = $first-chunk ~ $t;
@@ -94,7 +97,7 @@
         # since we have to be parrot-compatible, we can't use async
         # features, so we'll have to do it the nasty, time-out way.
         if $!debug { message("thrown out a connection that sent no data.") }
-        $!connection.close;
+        $connection.close;
         next;
     }
 
@@ -111,7 +114,7 @@
     unless defined $request
     {
       if $.debug { message("Client connection lost."); }
-      $!connection.close;
+      $connection.close;
       next;
     }
     message($request);
@@ -121,8 +124,8 @@
     if (!$protocol) { $protocol = DEFAULT_PROTOCOL; }
     unless $method eq 'GET' | 'POST' | 'HEAD' | 'PUT' | 'DELETE'
     { 
-      $!connection.send(self.unhandled-method);
-      $!connection.close;
+      $connection.send(self.unhandled-method);
+      $connection.close;
       next;
     }
     $!http-protocol = $protocol;
@@ -159,7 +162,7 @@
       if %.env<CONTENT_LENGTH>
       {
         while %.env<CONTENT_LENGTH> > $!body.bytes {
-          $!body ~= $!connection.recv(%.env<CONTENT_LENGTH> - $!body.bytes, :bin);
+          $!body ~= $connection.recv(%.env<CONTENT_LENGTH> - $!body.bytes, :bin);
         }
 #       if $.debug { message("Got body: "~$!body.decode); }
       }
@@ -167,7 +170,7 @@
     elsif $.always-get-body
     {
       ## No content length. Keep reading until no data is sent.
-      while my $read = $!connection.recv(:bin)
+      while my $read = $connection.recv(:bin)
       {
         $!body ~= $read;
       }
@@ -186,14 +189,18 @@
     {
       if $res ~~ Buf
       {
-        $!connection.write($res);
+        $connection.write($res);
       }
       else
       {
-        $!connection.send($res.Str);
+        $connection.send($res.Str);
       }
     }
-    $!connection.close;
+    }
+    if $! {
+        $!.say;
+    }
+    $connection.close;
     self.closed-connection;
     if $.debug { message("Client connection closed."); }
   }
